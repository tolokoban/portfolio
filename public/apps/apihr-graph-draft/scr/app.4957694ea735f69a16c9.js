"use strict";(self.webpackChunkapihr_graph=self.webpackChunkapihr_graph||[]).push([[143],{424:(t,r,e)=>{e.d(r,{Z:()=>s});var n=e(537),i=e.n(n),a=e(645),o=e.n(a)()(i());o.push([t.id,"#splash-screen {\n    transition: opacity var(--vanishing-delay);\n    opacity: 1;\n}\n\n#splash-screen.vanish {\n    transition: opacity var(--vanishing-delay);\n    opacity: 0;\n    pointer-events: none;\n}\n\nhtml {\n    font-size: 3vmin;\n}\n\nhtml,\nbody,\n#canvas {\n    font-family: sans-serif;\n    position: absolute;\n    left: 0;\n    top: 0;\n    width: 100%;\n    height: 100%;\n    margin: 0;\n    padding: 0;\n    overflow: hidden;\n}\n\nnav#sidebar {\n    position: absolute;\n    left: 0;\n    top: 0;\n    padding: 0.5em 0.5em 2em 0.5em;\n    color: #fffe;\n    background-color: #123c;\n    backdrop-filter: blur(5px);\n    max-width: 15em;\n    border-radius: 0 0 1em 0;\n    box-shadow: 0 3px 6px #0009;\n    transition: transform 0.3s;\n    transform: translate(0);\n}\n\nnav#sidebar.hide {\n    transform: translate(calc(2rem - 100%), calc(2rem - 100%));\n    background-color: transparent;\n    box-shadow: 0 3px 6px transparent;\n}\n\nnav#sidebar > button#toggle-sidebar {\n    position: absolute;\n    right: 0;\n    bottom: 0;\n    width: 2rem;\n    height: 2rem;\n    display: grid;\n    place-items: center;\n    border: 0;\n    padding: 0;\n    margin: 0;\n    border-radius: 50%;\n    background-color: #d80;\n    color: #000;\n    font-weight: bolder;\n    font-size: 1.5rem;\n    cursor: pointer;\n    transition: transform 0.3s;\n    transform: rotate(0);\n}\n\nnav#sidebar.hide > button#toggle-sidebar {\n    transform: rotate(180deg);\n}\n\ninput {\n    width: 100%;\n    font: inherit;\n    line-height: 2;\n    padding: 0 0.5em;\n    background: #fffe;\n    color: #000e;\n    border: 0;\n    box-shadow: 0 2px 4px #0009;\n    border-radius: 0.25em;\n    box-sizing: border-box;\n}\n","",{version:3,sources:["webpack://./src/index.css"],names:[],mappings:"AAAA;IACI,0CAA0C;IAC1C,UAAU;AACd;;AAEA;IACI,0CAA0C;IAC1C,UAAU;IACV,oBAAoB;AACxB;;AAEA;IACI,gBAAgB;AACpB;;AAEA;;;IAGI,uBAAuB;IACvB,kBAAkB;IAClB,OAAO;IACP,MAAM;IACN,WAAW;IACX,YAAY;IACZ,SAAS;IACT,UAAU;IACV,gBAAgB;AACpB;;AAEA;IACI,kBAAkB;IAClB,OAAO;IACP,MAAM;IACN,8BAA8B;IAC9B,YAAY;IACZ,uBAAuB;IACvB,0BAA0B;IAC1B,eAAe;IACf,wBAAwB;IACxB,2BAA2B;IAC3B,0BAA0B;IAC1B,uBAAuB;AAC3B;;AAEA;IACI,0DAA0D;IAC1D,6BAA6B;IAC7B,iCAAiC;AACrC;;AAEA;IACI,kBAAkB;IAClB,QAAQ;IACR,SAAS;IACT,WAAW;IACX,YAAY;IACZ,aAAa;IACb,mBAAmB;IACnB,SAAS;IACT,UAAU;IACV,SAAS;IACT,kBAAkB;IAClB,sBAAsB;IACtB,WAAW;IACX,mBAAmB;IACnB,iBAAiB;IACjB,eAAe;IACf,0BAA0B;IAC1B,oBAAoB;AACxB;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,WAAW;IACX,aAAa;IACb,cAAc;IACd,gBAAgB;IAChB,iBAAiB;IACjB,YAAY;IACZ,SAAS;IACT,2BAA2B;IAC3B,qBAAqB;IACrB,sBAAsB;AAC1B",sourcesContent:["#splash-screen {\n    transition: opacity var(--vanishing-delay);\n    opacity: 1;\n}\n\n#splash-screen.vanish {\n    transition: opacity var(--vanishing-delay);\n    opacity: 0;\n    pointer-events: none;\n}\n\nhtml {\n    font-size: 3vmin;\n}\n\nhtml,\nbody,\n#canvas {\n    font-family: sans-serif;\n    position: absolute;\n    left: 0;\n    top: 0;\n    width: 100%;\n    height: 100%;\n    margin: 0;\n    padding: 0;\n    overflow: hidden;\n}\n\nnav#sidebar {\n    position: absolute;\n    left: 0;\n    top: 0;\n    padding: 0.5em 0.5em 2em 0.5em;\n    color: #fffe;\n    background-color: #123c;\n    backdrop-filter: blur(5px);\n    max-width: 15em;\n    border-radius: 0 0 1em 0;\n    box-shadow: 0 3px 6px #0009;\n    transition: transform 0.3s;\n    transform: translate(0);\n}\n\nnav#sidebar.hide {\n    transform: translate(calc(2rem - 100%), calc(2rem - 100%));\n    background-color: transparent;\n    box-shadow: 0 3px 6px transparent;\n}\n\nnav#sidebar > button#toggle-sidebar {\n    position: absolute;\n    right: 0;\n    bottom: 0;\n    width: 2rem;\n    height: 2rem;\n    display: grid;\n    place-items: center;\n    border: 0;\n    padding: 0;\n    margin: 0;\n    border-radius: 50%;\n    background-color: #d80;\n    color: #000;\n    font-weight: bolder;\n    font-size: 1.5rem;\n    cursor: pointer;\n    transition: transform 0.3s;\n    transform: rotate(0);\n}\n\nnav#sidebar.hide > button#toggle-sidebar {\n    transform: rotate(180deg);\n}\n\ninput {\n    width: 100%;\n    font: inherit;\n    line-height: 2;\n    padding: 0 0.5em;\n    background: #fffe;\n    color: #000e;\n    border: 0;\n    box-shadow: 0 2px 4px #0009;\n    border-radius: 0.25em;\n    box-sizing: border-box;\n}\n"],sourceRoot:""}]);const s=o},645:t=>{t.exports=function(t){var r=[];return r.toString=function(){return this.map((function(r){var e="",n=void 0!==r[5];return r[4]&&(e+="@supports (".concat(r[4],") {")),r[2]&&(e+="@media ".concat(r[2]," {")),n&&(e+="@layer".concat(r[5].length>0?" ".concat(r[5]):""," {")),e+=t(r),n&&(e+="}"),r[2]&&(e+="}"),r[4]&&(e+="}"),e})).join("")},r.i=function(t,e,n,i,a){"string"==typeof t&&(t=[[null,t,void 0]]);var o={};if(n)for(var s=0;s<this.length;s++){var c=this[s][0];null!=c&&(o[c]=!0)}for(var u=0;u<t.length;u++){var l=[].concat(t[u]);n&&o[l[0]]||(void 0!==a&&(void 0===l[5]||(l[1]="@layer".concat(l[5].length>0?" ".concat(l[5]):""," {").concat(l[1],"}")),l[5]=a),e&&(l[2]?(l[1]="@media ".concat(l[2]," {").concat(l[1],"}"),l[2]=e):l[2]=e),i&&(l[4]?(l[1]="@supports (".concat(l[4],") {").concat(l[1],"}"),l[4]=i):l[4]="".concat(i)),r.push(l))}},r}},537:t=>{t.exports=function(t){var r=t[1],e=t[3];if(!e)return r;if("function"==typeof btoa){var n=btoa(unescape(encodeURIComponent(JSON.stringify(e)))),i="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(n),a="/*# ".concat(i," */");return[r].concat([a]).join("\n")}return[r].join("\n")}},379:t=>{var r=[];function e(t){for(var e=-1,n=0;n<r.length;n++)if(r[n].identifier===t){e=n;break}return e}function n(t,n){for(var a={},o=[],s=0;s<t.length;s++){var c=t[s],u=n.base?c[0]+n.base:c[0],l=a[u]||0,f="".concat(u," ").concat(l);a[u]=l+1;var h=e(f),A={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==h)r[h].references++,r[h].updater(A);else{var p=i(A,n);n.byIndex=s,r.splice(s,0,{identifier:f,updater:p,references:1})}o.push(f)}return o}function i(t,r){var e=r.domAPI(r);return e.update(t),function(r){if(r){if(r.css===t.css&&r.media===t.media&&r.sourceMap===t.sourceMap&&r.supports===t.supports&&r.layer===t.layer)return;e.update(t=r)}else e.remove()}}t.exports=function(t,i){var a=n(t=t||[],i=i||{});return function(t){t=t||[];for(var o=0;o<a.length;o++){var s=e(a[o]);r[s].references--}for(var c=n(t,i),u=0;u<a.length;u++){var l=e(a[u]);0===r[l].references&&(r[l].updater(),r.splice(l,1))}a=c}}},569:t=>{var r={};t.exports=function(t,e){var n=function(t){if(void 0===r[t]){var e=document.querySelector(t);if(window.HTMLIFrameElement&&e instanceof window.HTMLIFrameElement)try{e=e.contentDocument.head}catch(t){e=null}r[t]=e}return r[t]}(t);if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");n.appendChild(e)}},216:t=>{t.exports=function(t){var r=document.createElement("style");return t.setAttributes(r,t.attributes),t.insert(r,t.options),r}},565:(t,r,e)=>{t.exports=function(t){var r=e.nc;r&&t.setAttribute("nonce",r)}},795:t=>{t.exports=function(t){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var r=t.insertStyleElement(t);return{update:function(e){!function(t,r,e){var n="";e.supports&&(n+="@supports (".concat(e.supports,") {")),e.media&&(n+="@media ".concat(e.media," {"));var i=void 0!==e.layer;i&&(n+="@layer".concat(e.layer.length>0?" ".concat(e.layer):""," {")),n+=e.css,i&&(n+="}"),e.media&&(n+="}"),e.supports&&(n+="}");var a=e.sourceMap;a&&"undefined"!=typeof btoa&&(n+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),r.styleTagTransform(n,t,r.options)}(r,t,e)},remove:function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(r)}}}},589:t=>{t.exports=function(t,r){if(r.styleSheet)r.styleSheet.cssText=t;else{for(;r.firstChild;)r.removeChild(r.firstChild);r.appendChild(document.createTextNode(t))}}},874:(t,r,e)=>{const n=function(){function t(r,e){var n=this;this.gl=r,this.vertCount=e,this.vertStaticCursor=0,this.paint=function(t,r){var e=n,i=e.gl,a=e.prg;i.useProgram(a),r&&r(n,t),i.bindVertexArray(n.vertArray),i.drawArrays(i.TRIANGLE_STRIP,0,n.vertCount),i.bindVertexArray(null)};var i=r.createProgram();if(!i)throw Error("Unable to create a WebGL Program!");t.createShader(r,i,r.VERTEX_SHADER,t.VERT),t.createShader(r,i,r.FRAGMENT_SHADER,t.FRAG),r.linkProgram(i),this.prg=i,this._$uniCenter=r.getUniformLocation(i,"uniCenter"),this._$uniSize=r.getUniformLocation(i,"uniSize"),this._$uniTexture=r.getUniformLocation(i,"uniTexture");var a=r.createVertexArray();if(!a)throw Error("Unable to create Vertex Array Object!");this.vertArray=a,r.bindVertexArray(a);var o=Float32Array.BYTES_PER_ELEMENT,s=4*o,c=r.createBuffer();if(!c)throw Error("Unable to create WebGL Buffer (vertStatic)!");this.vertStaticBuff=c,r.bindBuffer(r.ARRAY_BUFFER,c),this.vertStaticData=new Float32Array(4*e),r.bufferData(r.ARRAY_BUFFER,this.vertStaticData,r.STATIC_DRAW);var u=r.getAttribLocation(i,"attPoint");r.enableVertexAttribArray(u),r.vertexAttribPointer(u,2,r.FLOAT,!1,s,0*o),r.vertexAttribDivisor(u,0);var l=r.getAttribLocation(i,"attUV");r.enableVertexAttribArray(l),r.vertexAttribPointer(l,2,r.FLOAT,!1,s,2*o),r.vertexAttribDivisor(l,0),r.bindVertexArray(null)}return t.prototype.pushVertStaticArray=function(){var t=this.gl,r=this.vertStaticBuff;t.bindBuffer(t.ARRAY_BUFFER,r),t.bufferData(t.ARRAY_BUFFER,this.vertStaticData,t.STATIC_DRAW)},t.prototype.pushVertStaticSubArray=function(t,r){var e=this.gl,n=this.vertStaticBuff;e.bindBuffer(e.ARRAY_BUFFER,n);var i=this.vertStaticData.subarray(4*t,4*r);e.bufferSubData(e.ARRAY_BUFFER,t*Float32Array.BYTES_PER_ELEMENT*4,i)},t.prototype.pokeVertStaticData=function(t,r,e,n){var i=this.vertStaticCursor;if(i<0||i>=this.vertCount)throw Error("[pokeVertStaticData] Cursor out of range: vertStaticCursor = ".concat(i));var a=this.vertStaticData,o=4*i;a[o++]=t,a[o++]=r,a[o++]=e,a[o++]=n,this.vertStaticCursor++},t.prototype.destroy=function(){var t=this,r=t.gl,e=t.prg,n=t.vertStaticBuff;r.deleteBuffer(n),r.deleteProgram(e),r.deleteVertexArray(this.vertArray)},t.prototype.$uniCenter=function(t,r){this.gl.uniform2f(this._$uniCenter,t,r)},t.prototype.$uniSize=function(t,r){this.gl.uniform2f(this._$uniSize,t,r)},t.prototype.$uniTexture=function(t){var r=this.gl;r.activeTexture(r.TEXTURE0),r.bindTexture(r.TEXTURE_2D,t),r.uniform1i(this._$uniTexture,0)},t.createShader=function(t,r,e,n){var i=t.createShader(e);if(!i)throw Error("Unable to create WebGL Shader!");t.shaderSource(i,n),t.compileShader(i),t.attachShader(r,i)},t.VERT="#version 300 es\n\nuniform vec2 uniCenter;\nuniform vec2 uniSize;\n/* Each coordinate is either +0.5 or -0.5. */\nin vec2 attPoint;\nin vec2 attUV;\nout vec2 varUV;\nout float varLight;\n\nvoid main() {\n  varUV = attUV;\n  vec2 point = uniCenter + uniSize * attPoint;\n  float radius = length(point);\n  varLight = (1.5 - radius) * 0.75 + 0.5;\n  float w = 1.0 + radius * 0.3;\n  gl_Position = vec4(point, 0, w);\n}\n",t.FRAG="#version 300 es\n\nprecision mediump float;\n\nuniform sampler2D uniTexture;\nin vec2 varUV;\nin float varLight;\nout vec4 glColor;\n\nvoid main() {\n  vec4 color = texture(uniTexture, varUV);\n  glColor = vec4(color.xyz * varLight, color.w);\n}",t}(),i=e.p+"img/cloud.b2707805ee2071fc1221.png";var a=256,o=128,s=new Map;function c(t,r){var e=s.get(r);if(e)return e;var n=function(t,r){var e="function"==typeof Symbol&&t[Symbol.iterator];if(!e)return t;var n,i,a=e.call(t),o=[];try{for(;(void 0===r||r-- >0)&&!(n=a.next()).done;)o.push(n.value)}catch(t){i={error:t}}finally{try{n&&!n.done&&(e=a.return)&&e.call(a)}finally{if(i)throw i.error}}return o}(function(t,r){var e=document.createElement("canvas");e.width=256,e.height=128;var n=e.getContext("2d");if(!n)throw Error("Unable to create a 2D context for canvas!");return[e,n]}(),2),c=n[0],u=n[1];u.clearRect(0,0,a,o);var l=t.createTexture();if(!l)throw Error("Unable to create a WebGL2 Texture!");s.set(r,l),t.bindTexture(t.TEXTURE_2D,l),t.pixelStorei(t.UNPACK_FLIP_Y_WEBGL,!1),t.texImage2D(t.TEXTURE_2D,0,t.RGBA,a,o,0,t.RGBA,t.UNSIGNED_BYTE,new Uint8Array([0,0,0,0])),t.texImage2D(t.TEXTURE_2D,0,t.RGBA,t.RGBA,t.UNSIGNED_BYTE,c),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_MAG_FILTER,t.LINEAR),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_MIN_FILTER,t.LINEAR),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_WRAP_S,t.REPEAT),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_WRAP_R,t.CLAMP_TO_EDGE);var f=new Image;return f.src=i,f.onload=function(){var e,n;u.clearRect(0,0,a,o),u.lineJoin="round",u.font="bold ".concat(25,"px sans-serif"),u.drawImage(f,0,0,a,o);var i=r.split(" ").map((function(t){return t.trim()})).filter((function(t){return t.length>0})),s=(o-25*i.length)/2+25;u.fillStyle="#fff",u.strokeStyle="#000",u.lineWidth=6.25;try{for(var h=function(t){var r="function"==typeof Symbol&&Symbol.iterator,e=r&&t[r],n=0;if(e)return e.call(t);if(t&&"number"==typeof t.length)return{next:function(){return t&&n>=t.length&&(t=void 0),{value:t&&t[n++],done:!t}}};throw new TypeError(r?"Object is not iterable.":"Symbol.iterator is not defined.")}(i),A=h.next();!A.done;A=h.next()){var p=A.value,d=u.measureText(p),v=(a-d.width)/2;u.strokeText(p,v,s),u.fillText(p,v,s),s+=25}}catch(t){e={error:t}}finally{try{A&&!A.done&&(n=h.return)&&n.call(h)}finally{if(e)throw e.error}}t.bindTexture(t.TEXTURE_2D,l),t.texImage2D(t.TEXTURE_2D,0,t.RGBA,t.RGBA,t.UNSIGNED_BYTE,c),console.log("###")},f.onerror=function(){console.error("Unable to load image:",i)},l}var u=function(){function t(t){var r=this;this.gl=t,this.textures=new Map,this.component={label:"???",x:0,y:0},this.handlePaint=function(t,e){var n=r,i=n.component,a=n.gl,o=a.drawingBufferWidth/a.drawingBufferHeight;t.$uniTexture(r.getOrMakeTexture(i.label)),t.$uniCenter(i.x,i.y),t.$uniSize(.5,.5*o)},this.painter=new n(t,4),this.painter.pokeVertStaticData(-.5,.25,0,0),this.painter.pokeVertStaticData(.5,.25,1,0),this.painter.pokeVertStaticData(-.5,-.25,0,1),this.painter.pokeVertStaticData(.5,-.25,1,1),this.painter.pushVertStaticArray()}return t.prototype.paint=function(t,r){var e,n,i=this.gl;i.disable(i.DEPTH_TEST),i.enable(i.BLEND),i.blendEquationSeparate(i.FUNC_ADD,i.FUNC_ADD),i.blendFunc(i.SRC_ALPHA,i.ONE_MINUS_SRC_ALPHA);var a=r.components;try{for(var o=function(t){var r="function"==typeof Symbol&&Symbol.iterator,e=r&&t[r],n=0;if(e)return e.call(t);if(t&&"number"==typeof t.length)return{next:function(){return t&&n>=t.length&&(t=void 0),{value:t&&t[n++],done:!t}}};throw new TypeError(r?"Object is not iterable.":"Symbol.iterator is not defined.")}(Object.keys(a)),s=o.next();!s.done;s=o.next()){var c=s.value;this.component=a[c],this.painter.paint(t,this.handlePaint)}}catch(t){e={error:t}}finally{try{s&&!s.done&&(n=o.return)&&n.call(o)}finally{if(e)throw e.error}}},t.prototype.getOrMakeTexture=function(t){var r=this.textures.get("label");if(r)return r;var e=c(this.gl,t);return this.textures.set(t,e),e},t}();const l=u;function f(t){var r,e,n=Object.keys(t),i=t[n[0]],a=1e6;try{for(var o=function(t){var r="function"==typeof Symbol&&Symbol.iterator,e=r&&t[r],n=0;if(e)return e.call(t);if(t&&"number"==typeof t.length)return{next:function(){return t&&n>=t.length&&(t=void 0),{value:t&&t[n++],done:!t}}};throw new TypeError(r?"Object is not iterable.":"Symbol.iterator is not defined.")}(n),s=o.next();!s.done;s=o.next()){var c=t[s.value],u=c.x,l=c.y,f=u*u+l*l;f<a&&(a=f,i=c)}}catch(t){r={error:t}}finally{try{s&&!s.done&&(e=o.return)&&e.call(o)}finally{if(r)throw r.error}}return i}function h(t,r,e){return(1-e)*t+e*r}function A(t,r){return t+Math.random()*(r-t)}var p=function(){return p=Object.assign||function(t){for(var r,e=1,n=arguments.length;e<n;e++)for(var i in r=arguments[e])Object.prototype.hasOwnProperty.call(r,i)&&(t[i]=r[i]);return t},p.apply(this,arguments)},d=function(t){var r="function"==typeof Symbol&&Symbol.iterator,e=r&&t[r],n=0;if(e)return e.call(t);if(t&&"number"==typeof t.length)return{next:function(){return t&&n>=t.length&&(t=void 0),{value:t&&t[n++],done:!t}}};throw new TypeError(r?"Object is not iterable.":"Symbol.iterator is not defined.")};const v=function(){function t(t){this.fromTime=-1,this.toTime=0,this.waitingGraph=null,this.waitingTransitionDuration=0,this.fromGraph=m(t),this.fromTime=-1,this.toGraph=m(t),this.toTime=0,this.currentGraph=t}return t.prototype.getCurrentgraph=function(){return m(this.currentGraph)},t.prototype.update=function(t,r){void 0===r&&(r=300),this.waitingGraph=t,this.waitingTransitionDuration=r},t.prototype.snaphshot=function(t){var r=this,e=r.fromTime,n=r.toTime,i=r.fromGraph,a=r.toGraph,o=r.waitingGraph,s=r.waitingTransitionDuration;if(t<this.toTime){var c=(t-e)/(n-e);this.currentGraph=function(t,r,e){var n,i;if(e<0)return m(t);if(e>1)return m(r);var a=m(r);try{for(var o=d(Object.keys(a.components)),s=o.next();!s.done;s=o.next()){var c=s.value,u=t.components[c];if(u){var l=a.components[c];l.x=h(u.x,l.x,e),l.y=h(u.y,l.y,e)}}}catch(t){n={error:t}}finally{try{s&&!s.done&&(i=o.return)&&i.call(o)}finally{if(n)throw n.error}}return a}(i,a,c)}else o&&(this.fromGraph=this.toGraph,this.toGraph=o,this.fromTime=t,this.toTime=t+s,this.waitingGraph=null),this.currentGraph=m(a);return this.currentGraph},t.prototype.centerOn=function(t){var r,e,n=m(this.currentGraph),i=n.components;if(i[t]){var a=f(i);if(a.label!==t&&Math.abs(a.x)+Math.abs(a.y)<.001){var o=(b=i[t]).x,s=b.y;b.x=a.x,b.y=a.y,a.x=o,a.y=s}else{var c=Object.keys(i),u=0,l=2*Math.PI/(c.length-1),h=2*Math.PI*Math.random();try{for(var A=d(c),p=A.next();!p.done;p=A.next()){var v=p.value,b=i[v];if(v===t)b.x=0,b.y=0;else{var y=l*u+h;b.x=1*Math.sin(y),b.y=1*Math.cos(y),u++}}}catch(t){r={error:t}}finally{try{p&&!p.done&&(e=A.return)&&e.call(A)}finally{if(r)throw r.error}}}this.update(n)}},t}();function m(t){var r,e,n={components:{},links:t.links.map((function(t){return p({},t)}))};try{for(var i=d(Object.keys(t.components)),a=i.next();!a.done;a=i.next()){var o=a.value;n.components[o]=p({},t.components[o])}}catch(t){r={error:t}}finally{try{a&&!a.done&&(e=i.return)&&e.call(i)}finally{if(r)throw r.error}}return n}var b=function(t){var r="function"==typeof Symbol&&Symbol.iterator,e=r&&t[r],n=0;if(e)return e.call(t);if(t&&"number"==typeof t.length)return{next:function(){return t&&n>=t.length&&(t=void 0),{value:t&&t[n++],done:!t}}};throw new TypeError(r?"Object is not iterable.":"Symbol.iterator is not defined.")};function y(t,r){var e,n,i=t.target;if(!i)throw Error("Event without target!");var a=i.getBoundingClientRect(),o=a.left,s=a.top,c=a.width,u=a.height,l=(t.clientX-o)/c*2-1,f=1-(t.clientY-s)/u*2,h=r.getCurrentgraph().components,A="",p=1e6;try{for(var d=b(Object.keys(h)),v=d.next();!v.done;v=d.next()){var m=v.value,y=h[m],g=l-y.x,C=f-y.y,x=g*g+C*C;x<p&&(p=x,A=m)}}catch(t){e={error:t}}finally{try{v&&!v.done&&(n=d.return)&&n.call(d)}finally{if(e)throw e.error}}return h[A]}const g=function(t,r){var e=this;this.graphController=t,this.fromId="",this.toId="",this.handlePointerDown=function(t){e.fromId=y(t,e.graphController).label},this.handlePointerUp=function(t){if(e.toId=y(t,e.graphController).label,e.fromId!==e.toId){var r=e.graphController.getCurrentgraph(),n=function(t,r,e){return t.links.find((function(t){return!(t.from!==r&&t.from!==e||t.to!==r&&t.to!==e)}))}(r,e.fromId,e.toId);if((t.ctrlKey||t.shiftKey)&&(r.links=r.links.filter((function(t){return t!==n})),n=void 0),n)switch(t.altKey&&(n.speed="fast"),n.speed){case"slow":n.speed="medium";break;case"medium":n.speed="fast";break;default:r.links=r.links.filter((function(t){return t!==n}))}else r.links.push({from:e.fromId,to:e.toId,speed:C(t)});e.graphController.update(r)}},r.addEventListener("pointerdown",this.handlePointerDown),r.addEventListener("pointerup",this.handlePointerUp)};function C(t){return t.ctrlKey?"fast":t.shiftKey?"medium":"slow"}var x=function(){function t(r,e,n){var i=this;this.gl=r,this.vertCount=e,this.instCount=n,this.vertStaticCursor=0,this.instDynamicCursor=0,this.paint=function(t,r){var e=i,n=e.gl,a=e.prg;n.useProgram(a),r&&r(i,t),n.bindVertexArray(i.vertArray),n.drawArraysInstanced(n.POINTS,0,i.vertCount,i.instCount),n.bindVertexArray(null)};var a=r.createProgram();if(!a)throw Error("Unable to create a WebGL Program!");t.createShader(r,a,r.VERTEX_SHADER,t.VERT),t.createShader(r,a,r.FRAGMENT_SHADER,t.FRAG),r.linkProgram(a),this.prg=a,this._$uniLight=r.getUniformLocation(a,"uniLight"),this._$uniSize=r.getUniformLocation(a,"uniSize"),this._$uniTime=r.getUniformLocation(a,"uniTime");var o=r.createVertexArray();if(!o)throw Error("Unable to create Vertex Array Object!");this.vertArray=o,r.bindVertexArray(o);var s=Float32Array.BYTES_PER_ELEMENT,c=3*s,u=r.createBuffer();if(!u)throw Error("Unable to create WebGL Buffer (vertStatic)!");this.vertStaticBuff=u,r.bindBuffer(r.ARRAY_BUFFER,u),this.vertStaticData=new Float32Array(3*e),r.bufferData(r.ARRAY_BUFFER,this.vertStaticData,r.STATIC_DRAW);var l=r.getAttribLocation(a,"attPosition");r.enableVertexAttribArray(l),r.vertexAttribPointer(l,1,r.FLOAT,!1,c,0*s),r.vertexAttribDivisor(l,0);var f=r.getAttribLocation(a,"attDirection");r.enableVertexAttribArray(f),r.vertexAttribPointer(f,1,r.FLOAT,!1,c,1*s),r.vertexAttribDivisor(f,0);var h=r.getAttribLocation(a,"attRadius");r.enableVertexAttribArray(h),r.vertexAttribPointer(h,1,r.FLOAT,!1,c,2*s),r.vertexAttribDivisor(h,0);var A=9*s,p=r.createBuffer();if(!p)throw Error("Unable to create WebGL Buffer (instDynamic)!");this.instDynamicBuff=p,r.bindBuffer(r.ARRAY_BUFFER,p),this.instDynamicData=new Float32Array(9*n),r.bufferData(r.ARRAY_BUFFER,this.instDynamicData,r.DYNAMIC_DRAW);var d=r.getAttribLocation(a,"attA");r.enableVertexAttribArray(d),r.vertexAttribPointer(d,2,r.FLOAT,!1,A,0*s),r.vertexAttribDivisor(d,1);var v=r.getAttribLocation(a,"attB");r.enableVertexAttribArray(v),r.vertexAttribPointer(v,2,r.FLOAT,!1,A,2*s),r.vertexAttribDivisor(v,1);var m=r.getAttribLocation(a,"attColor");r.enableVertexAttribArray(m),r.vertexAttribPointer(m,3,r.FLOAT,!1,A,4*s),r.vertexAttribDivisor(m,1);var b=r.getAttribLocation(a,"attSpeed");r.enableVertexAttribArray(b),r.vertexAttribPointer(b,1,r.FLOAT,!1,A,7*s),r.vertexAttribDivisor(b,1);var y=r.getAttribLocation(a,"attPerturbation");r.enableVertexAttribArray(y),r.vertexAttribPointer(y,1,r.FLOAT,!1,A,8*s),r.vertexAttribDivisor(y,1),r.bindVertexArray(null)}return t.prototype.pushVertStaticArray=function(){var t=this.gl,r=this.vertStaticBuff;t.bindBuffer(t.ARRAY_BUFFER,r),t.bufferData(t.ARRAY_BUFFER,this.vertStaticData,t.STATIC_DRAW)},t.prototype.pushVertStaticSubArray=function(t,r){var e=this.gl,n=this.vertStaticBuff;e.bindBuffer(e.ARRAY_BUFFER,n);var i=this.vertStaticData.subarray(3*t,3*r);e.bufferSubData(e.ARRAY_BUFFER,t*Float32Array.BYTES_PER_ELEMENT*3,i)},t.prototype.pushInstDynamicArray=function(){var t=this.gl,r=this.instDynamicBuff;t.bindBuffer(t.ARRAY_BUFFER,r),t.bufferData(t.ARRAY_BUFFER,this.instDynamicData,t.DYNAMIC_DRAW)},t.prototype.pushInstDynamicSubArray=function(t,r){var e=this.gl,n=this.instDynamicBuff;e.bindBuffer(e.ARRAY_BUFFER,n);var i=this.instDynamicData.subarray(9*t,9*r);e.bufferSubData(e.ARRAY_BUFFER,t*Float32Array.BYTES_PER_ELEMENT*9,i)},t.prototype.pokeVertStaticData=function(t,r,e){var n=this.vertStaticCursor;if(n<0||n>=this.vertCount)throw Error("[pokeVertStaticData] Cursor out of range: vertStaticCursor = ".concat(n));var i=this.vertStaticData,a=3*n;i[a++]=t,i[a++]=r,i[a++]=e,this.vertStaticCursor++},t.prototype.pokeInstDynamicData=function(t,r,e,n,i,a,o,s,c){var u=this.instDynamicCursor;if(u<0||u>=this.instCount)throw Error("[pokeInstDynamicData] Cursor out of range: instDynamicCursor = ".concat(u));var l=this.instDynamicData,f=9*u;l[f++]=t,l[f++]=r,l[f++]=e,l[f++]=n,l[f++]=i,l[f++]=a,l[f++]=o,l[f++]=s,l[f++]=c,this.instDynamicCursor++},t.swapInstDynamicData=function(t,r,e){var n=9*r,i=9*e,a=0;a=t[n],t[n++]=t[i],t[i++]=a,a=t[n],t[n++]=t[i],t[i++]=a,a=t[n],t[n++]=t[i],t[i++]=a,a=t[n],t[n++]=t[i],t[i++]=a,a=t[n],t[n++]=t[i],t[i++]=a,a=t[n],t[n++]=t[i],t[i++]=a,a=t[n],t[n++]=t[i],t[i++]=a,a=t[n],t[n++]=t[i],t[i++]=a,a=t[n],t[n++]=t[i],t[i++]=a},t.prototype.destroy=function(){var t=this,r=t.gl,e=t.prg,n=t.vertStaticBuff,i=t.instDynamicBuff;r.deleteBuffer(n),r.deleteBuffer(i),r.deleteProgram(e),r.deleteVertexArray(this.vertArray)},t.prototype.$uniLight=function(t){this.gl.uniform1f(this._$uniLight,t)},t.prototype.$uniSize=function(t){this.gl.uniform1f(this._$uniSize,t)},t.prototype.$uniTime=function(t){this.gl.uniform1f(this._$uniTime,t)},t.createShader=function(t,r,e,n){var i=t.createShader(e);if(!i)throw Error("Unable to create WebGL Shader!");t.shaderSource(i,n),t.compileShader(i),t.attachShader(r,i)},t.VERT="#version 300 es\n\nuniform float uniTime;\nuniform float uniSize;\nuniform float uniLight;\nin float attPosition;\nin float attDirection;\nin float attRadius;\nin vec2 attA;\nin vec2 attB;\nin vec3 attColor;\nin float attSpeed;\nin float attPerturbation;\nout vec4 varColor;\n\nvoid main() {\n  vec2 direction = normalize(attB - attA);\n  vec2 normal = attPerturbation * vec2(direction.y, -direction.x);\n  float move = attPerturbation > 0.0 ? attDirection : sign(attDirection);\n  float position = fract(attPosition + move * uniTime * 0.0001 * attSpeed);\n  vec2 point = mix(attA, attB, position);\n  float t1 = (position * 10000.0 + uniTime) * 0.00103;\n  float t2 = (position * 2107.0 + uniTime) * 0.00317;\n  point += cos(t1) * sin(t2) * normal;\n  float radius = length(point);\n  float w = 1.0 + radius * 0.3;  \n  varColor = vec4(attColor * uniLight, 1.0);\n  gl_Position = vec4(point, 0, w);\n  gl_PointSize = attPerturbation > 0.0 ? uniSize * attRadius : uniSize * 1.5;\n}\n",t.FRAG="#version 300 es\n\nprecision mediump float;\n\nin vec4 varColor;\nout vec4 glColor;\n\nvoid main() {\n  float alpha = varColor.a;\n  vec2 point = 2.0 * (gl_PointCoord - vec2(0.5));\n  alpha *= 1.0 - length(point);\n  glColor = vec4(varColor.rgb, alpha);\n}",t}();const B=x;var S=function(t,r){var e="function"==typeof Symbol&&t[Symbol.iterator];if(!e)return t;var n,i,a=e.call(t),o=[];try{for(;(void 0===r||r-- >0)&&!(n=a.next()).done;)o.push(n.value)}catch(t){i={error:t}}finally{try{n&&!n.done&&(e=a.return)&&e.call(a)}finally{if(i)throw i.error}}return o},E=function(t,r,e){if(e||2===arguments.length)for(var n,i=0,a=r.length;i<a;i++)!n&&i in r||(n||(n=Array.prototype.slice.call(r,0,i)),n[i]=r[i]);return t.concat(n||Array.prototype.slice.call(r))},T={slow:[1,.25,.25,.25,.03],medium:[1,.8,.1,.5,1e-4],fast:[.5,.75,1,1,0]},R=function(){function t(t){var r=this;this.gl=t,this.textures=new Map,this.scale=1,this.handlePaint=function(t,e){var n=r.gl;n.drawingBufferWidth,n.drawingBufferHeight,n.disable(n.DEPTH_TEST),n.enable(n.BLEND),n.blendEquationSeparate(n.FUNC_ADD,n.FUNC_ADD),n.blendFuncSeparate(n.SRC_ALPHA,n.ONE,n.ONE,n.ONE_MINUS_SRC_ALPHA),t.$uniLight(r.scale),t.$uniSize(.02*r.scale*Math.min(n.drawingBufferWidth,n.drawingBufferHeight)),t.$uniTime(e)},this.painter=new B(t,20,1024);for(var e=0;e<10;e++){var n=e/10;this.painter.pokeVertStaticData(n,-A(.7,1),A(1,2)),this.painter.pokeVertStaticData(n,+A(.7,1),A(1,2))}this.painter.pushVertStaticArray(),this.painter.instDynamicCursor=0,this.painter.instCount=0}return t.prototype.paint=function(t,r){var e=r.components,n=f(e),i=r.links.filter((function(t){var r=t.from,e=t.to;return r===n.label||e===n.label})),a=r.links.filter((function(t){var r=t.from,e=t.to;return r!==n.label&&e!==n.label}));this.paintLinks(a,.5,e,t),this.paintLinks(i,1,e,t)},t.prototype.paintLinks=function(t,r,e,n){var i,a,o;this.scale=r,this.painter.instCount=t.length,this.painter.instDynamicCursor=0;try{for(var s=function(t){var r="function"==typeof Symbol&&Symbol.iterator,e=r&&t[r],n=0;if(e)return e.call(t);if(t&&"number"==typeof t.length)return{next:function(){return t&&n>=t.length&&(t=void 0),{value:t&&t[n++],done:!t}}};throw new TypeError(r?"Object is not iterable.":"Symbol.iterator is not defined.")}(t),c=s.next();!c.done;c=s.next()){var u=c.value,l=u.from,f=u.to,h=u.speed,A=e[l],p=e[f];(o=this.painter).pokeInstDynamicData.apply(o,E([A.x,A.y,p.x,p.y],S(T[h]),!1))}}catch(t){i={error:t}}finally{try{c&&!c.done&&(a=s.return)&&a.call(s)}finally{if(i)throw i.error}}this.painter.pushInstDynamicSubArray(0,t.length),this.painter.paint(n,this.handlePaint)},t}();const w=R;var D=function(t){var r="function"==typeof Symbol&&Symbol.iterator,e=r&&t[r],n=0;if(e)return e.call(t);if(t&&"number"==typeof t.length)return{next:function(){return t&&n>=t.length&&(t=void 0),{value:t&&t[n++],done:!t}}};throw new TypeError(r?"Object is not iterable.":"Symbol.iterator is not defined.")};function I(t){var r,e,n={};try{for(var i=D(t),a=i.next();!a.done;a=i.next()){var o=a.value;n[o]={label:o,x:A(-1,1),y:A(-1,1)}}}catch(t){r={error:t}}finally{try{a&&!a.done&&(e=i.return)&&e.call(i)}finally{if(r)throw r.error}}return n}var _=e(379),U=e.n(_),L=e(795),F=e.n(L),P=e(569),k=e.n(P),V=e(565),O=e.n(V),G=e(216),M=e.n(G),N=e(589),Y=e.n(N),W=e(424),j={};function z(t){var r=document.getElementById(t);if(!t)throw Error('Unable to find element with id "'.concat(t,'"!'));return r}j.styleTagTransform=Y(),j.setAttributes=O(),j.insert=k().bind(null,"head"),j.domAPI=F(),j.insertStyleElement=M(),U()(W.Z,j),W.Z&&W.Z.locals&&W.Z.locals,function(){z("toggle-sidebar").addEventListener("click",(function(){z("sidebar").classList.toggle("hide")})),function(t){var r=t.getContext("webgl2",{antialias:!1,depth:!1,stencil:!1,preserveDrawingBuffer:!1,alpha:!1});if(!r)throw Error("Unable to create WebGL2 context!");var e=new v({links:[{from:"Base RH",to:"Maladie",speed:"slow"},{from:"Base RH",to:"LAMal",speed:"medium"},{from:"Base RH",to:"Caisse Pension",speed:"fast"}],components:I(["Base RH","Compta","Planning","Vacances","Maladie","Formation","Recrutement","Caisse Pension","AVS/AI/AF","Sinistres","LAMal"])});e.centerOn(Object.keys(e.getCurrentgraph().components)[0]),new g(e,r.canvas),r.canvas.addEventListener("dblclick",(function(t){return function(t,r){var e=y(t,r);r.centerOn(e.label)}(t,e)}),!0);var n=new w(r),i=new l(r),a=0,o=0,s=e.getCurrentgraph(),c=function(t){var u=r.canvas.clientWidth,l=r.canvas.clientHeight;u===a&&l==o||(a=u,o=l,r.canvas.width=u,r.canvas.height=l,r.viewport(0,0,u,l)),r.clearColor(0,.3,.6,1),r.clear(r.COLOR_BUFFER_BIT),n.paint(t,s),i.paint(t,s),s=e.snaphshot(t),window.requestAnimationFrame(c)};window.requestAnimationFrame(c)}(z("canvas"));var t=z("splash-screen");t.classList.add("vanish"),t.style.setProperty("--vanishing-delay","".concat(500,"ms")),window.setTimeout((function(){var r;return null===(r=t.parentNode)||void 0===r?void 0:r.removeChild(t)}),500)}()}},t=>{t(t.s=874)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,